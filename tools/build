#!/bin/bash

# The MIT License
# 
# Copyright (c) <2010> <Shaun T. Erickson>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#
# Execute the config file, to set up any needed variables.
#
conf_dir=`dirname $0`
. ${conf_dir}/.smxyconf

#
# Check for required command line argument
# and that it's one of the acceptable values.
# Complain and quit if it's missing or wrong.
#
if [ -n "${1}" -a \( "${1}" = "coreOS" -o "${1}" = "fortisOS" -o "${1}" = "aurora" \) ]
then
    distro=${1}
else
    echo
    echo "Usage: `basename ${0}` {coreOS|fortisOS|aurora}"
    echo
    exit 1
fi

#
# Go to the cloned source directory
#
if [ "${distro}" = "aurora" ]
then
    cd ${src}/${distro}/Aurora
else
    cd ${src}/${distro}/opensim
fi

#
# Update it
#
mkdir -p ${src}/${distro}/build
git pull > ${src}/${distro}/build/gp.log 2>&1

#
# Set up some useful variables:
#
# version looks like: 2303945 - r10613 2009-09-06 04:29:21 +0100
# tag looks like    : r10613
# build looks like  : build-r10613
# opensim looks like: opensim-r10613
#
if [ "${distro}" = "coreOS" ]
then
    version="`git log -n 1 --decorate --oneline | sed -e 's/(HEAD, r\//- r/' -e 's/,.*$//'` `git log -n 1 --pretty="format:%ci"`"
else
    version="`git log -n 1 --decorate --oneline | sed -e 's/(.*$/ - r/'``git log -n 1 --pretty="format:%at"` `git log -n 1 --pretty="format:%ci"`"
fi
tag="`echo ${version} | awk '{print $3}'`"
build="build-${tag}"
if [ "${distro}" = "aurora" ]
then
    opensim="aurora-${tag}"
else
    opensim="opensim-${tag}"
fi

#
# Make a clean source tree to build in
# Never build in your git clone directory.
#
mkdir ${src}/${distro}/build/${build}
cd ${src}/${distro}/build/${build}
mv ${src}/${distro}/build/gp.log ${src}/${distro}/build/${build}.log
if [ "${distro}" = "aurora" ]
then
    git --git-dir=${src}/${distro}/Aurora/.git --work-tree=. checkout master >> ${src}/${distro}/build/${build}.log 2>&1
    git --git-dir=${src}/${distro}/Aurora/.git --work-tree=. reset --hard >> ${src}/${distro}/build/${build}.log 2>&1
else
    git --git-dir=${src}/${distro}/opensim/.git --work-tree=. checkout master >> ${src}/${distro}/build/${build}.log 2>&1
    git --git-dir=${src}/${distro}/opensim/.git --work-tree=. reset --hard >> ${src}/${distro}/build/${build}.log 2>&1
fi
if [ "${distro}" = "coreOS" -o "${distro}" = "aurora" ]
then
    echo ${version} > bin/.version
else
    mkdir -p bin/Debug
    echo ${version} > bin/Debug/.version
fi

#
# Build the release
#
./runprebuild.sh >> ${src}/${distro}/build/${build}.log 2>&1
xbuild >> ${src}/${distro}/build/${build}.log 2>&1

#
# Show the last 5 lines of the log, to see if there were any errors.
# To Do: Spit out a message and exit, here, if there were errors,
# rather than continuing.
#
tail -5 ${src}/${distro}/build/${build}.log

#
# Set up the new runtime structure
#
cd ${src}/${distro}/build
mkdir ${opensim}
if [ "${distro}" = "coreOS" -o "${distro}" = "aurora" ]
then
    cp -pr ${build}/bin ./${opensim}
else
    cp -pr ${build}/bin/Debug ./${opensim}/bin
fi
tar czf ${opensim}.tgz ${opensim}

#
# Deploy the code
#
# I recommend setting up ssh keys, so you don't
# get prompted for your password twice per server.
#
for server in ${sim_servers}
do
    if [ "${server}" = "localhost" ]
    then
        cp ${opensim}.tgz ${dist}
        deploy ${tag}
    else
        scp ${opensim}.tgz ${account}@${server}:grid/dist
        ssh ${account}@${server} "grid/tools/deploy ${opensim}"
    fi
done
